<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.cauliflower.danielt.smartphoneradar">

    <!--
         The ACCESS_COARSE/FINE_LOCATION permissions are not required to use
         Google Maps Android API v2, but you must specify either coarse or fine
         location permissions for the 'MyLocation' functionality. 
    -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />

    <application
        android:name=".RadarApp"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher_hat"
        android:label="@string/app_name"
        android:persistent="true"
        android:roundIcon="@mipmap/ic_launcher_hat"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">

        <!--
             The API key for Google Maps-based APIs is defined as a string resource.
             (See the file "res/values/google_maps_api.xml").
             Note that the API key is linked to the encryption key used to sign the APK.
             You need a different API key for each encryption key, including the release key that is used to
             sign the APK for publishing.
             You can define the keys for the debug and release targets in src/debug/ and src/release/.
        -->
        <meta-data
            android:name="com.google.android.geo.API_KEY"
            android:value="@string/google_maps_key" />
        <!--For facebook login-->
        <meta-data
            android:name="com.facebook.sdk.ApplicationId"
            android:value="@string/facebook_application_id" />

        <activity
            android:name="com.facebook.FacebookActivity"
            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
            android:label="@string/app_name" />
        <activity
            android:name="com.facebook.CustomTabActivity"
            android:exported="true">
            <intent-filter><action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />

                <data android:scheme="@string/facebook_login_protocol_scheme" />
            </intent-filter>
        </activity>

        <!--<provider
            android:name=".data.RadarProvider"
            android:authorities="@string/content_authority"
            android:exported="false" />-->

        <activity
            android:name=".ui.SettingsActivity"
            android:launchMode="singleTask">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity
            android:name=".ui.AccountActivity"
            android:label="@string/pref_title_AccountActivity"
            android:parentActivityName=".ui.SettingsActivity">

            <!-- Parent activity meta-data to support 4.0 and lower -->
            <meta-data
                android:name="android.support.PARENT_ACTIVITY"
                android:value=".ui.SettingsActivity" />
        </activity>
        <activity
            android:name=".ui.MapsActivity"
            android:label="@string/pref_title_MapsActivity"
            android:parentActivityName=".ui.SettingsActivity">
            <!-- Parent activity meta-data to support 4.0 and lower -->
            <meta-data
                android:name="android.support.PARENT_ACTIVITY"
                android:value=".ui.SettingsActivity" />
        </activity>

        <service
            android:name=".service.RadarService"
            android:enabled="true"
            android:exported="false" />
        <service
            android:name=".service.NetWatcherJob"
            android:exported="true"
            android:permission="android.permission.BIND_JOB_SERVICE" />

        <!-- 網路的開關會啟動 NetWatcher，會間接啟動或關閉 RadarService -->
        <receiver android:name=".receiver.NetWatcher">
            <intent-filter>
                <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
            </intent-filter>
        </receiver>

    </application>

</manifest><!--
    todo 00: User story、使用流程、定位Service驗證 (done)
    todo 01: Server 資料庫建立 (done) 舊版功能
    todo 02: PHP 查詢 DB (done) 舊版功能
    todo 02: Http 溝通 Server 的設計 (done) 舊版功能
    todo 03: 註冊帳號 dialog (done) 舊版功能
    todo 04: 帳號資訊 Activity (done)
    todo 05: 定位 Service (done)
    todo 06: 設定頁面：有關 sendLocation 的設定，使用 PreferenceFragment 實作該功能
                開始定位這支手機 ON/OFF（done）
                更新位置間隔（每隔幾秒更新一次手機的位置）(done)
                使用指南
                查詢其他手機位置（done）
    todo 07: MapsActivity 應該附加一些功能（現今座標透過 Cluster 顯示）
                Cluster 座標應附加 Title(done)
                類似 Menu button，點擊後
                    顯示 RecyclerView 列出所有的座標，若點擊選項則鏡頭移動至該座標
                    顯示/隱藏歷史座標
                    只顯示新座標
                    現在在考慮有無必要設計新舊標記的顯示或隱藏，因為有清單提供所有紀錄，
                    查詢任何標記都很方便，除非過去存在的標記過多，妨礙查看，所以保留功能：隱藏舊的座標(done)
                在沒有任何座標資料時，須做出提示()
    todo 08: AccountActivity
                是否應該限制一隻手機只能綁定一個“定位”用帳號?
                應該是的，但考慮到使用者移除ＡＰＰ或其資料後，忘記帳號密碼
                應添加新功能：驗證使用者身份
                    要求使用者輸入帳號與信箱，接著傳送一組驗證碼到信箱，使用者於ＡＰＰ內輸入該驗證碼
                    若正確則使用該組驗證碼做為密碼(done)

                這個決定意味著在 LogInActivity 並不會有“定位”帳號清單能夠選擇以登入
                只有“查詢”帳號能夠選擇(done)
    todo 09: MapsActivity
                為座標清單建立暫存，避免再次進入 MapsActivity 時重新向裝置端 database 查詢座標 (再考慮)
    todo 10: 重構 RadarService, AccountActivity, SettingsFragment(done)

    todo 11: RadarService 希望更新座標時 先判斷與上一次送出的座標距離，若距離在XXX內則不送出這次的座標，
    這樣做的優點是，追蹤該使用者時，不會因為使用者移動距離不大或沒有移動，卻持續監聽到更新的座標，
    在一小時內，可能同一地圖區域內，存在了 720 個標記 （假設 5 秒更新一次座標）(done)

    todo 12: 查閱 firestore 監聽文件
     metadata.hasPending => true 代表是未寫入 firestore 的資料
     其實不是監聽出問題，而是location丟錯位置了 RecyclerViewAdapter 跟他的父類別都有同名稱的 mLocationList
     而新的 location add 到了父類別的 mLocationList，理所當然的，RecyclerView 永遠沒有新的資料，
     後來決定只保留一個 locationList 就夠了(done)

     todo 13: MapsActivity 新增功能，能刪除手機端資料庫內，舊的座標
       實現方式：向左或右滑動 recyclerView 的 item 即刪除該筆資料(done)

     todo 14: 因為現今使用 firebase auth 與 firestore 需重新描述各功能如何實作完成，以及其規則

     todo 15: 過去幾個月學了LiveData、ViewModel、Room、DataBinding，是該將這些知識加入專案了，
        否則有種白學的感覺😅。雖然得花不少成本，但不嘗試怎會有收穫呢🤨
        todo 15-1: 目前最不滿意的是 AccountActivity 這個 class，先試著使用 LiveData 的“可觀察”特性，
        觀察 FirebaseAuth 以減少自行檢查 FirebaseAuth 登入狀況

        todo 15-2: 使用 DataBinding 修改 AccountActivity done

        todo 15-3: 在想可不可以將 DataBinding 使用在 AccountActivity 中的 dialog，
        但這是不是代表要在 AccountActivity 的 layout 檔中加入 Dialog，而且 DataBinding 的 dialog 似乎沒有更好用
        這個想法先保留

        todo 25-4: 是時候加入 Room 了，這個決定會更動到所有與資料庫有關的 Class
            我想更改個功能，原本在 AccountActivity 可以選擇要追蹤哪個對象，
            改成在 MapsActivity 的 menu 選擇追蹤對象 done

        todo 25-4-1: 突然冒出很多想法，得整理一下...
            1.使用者的帳號資訊，不儲存在手機內存
                目的有兩個:  1.增加個資安全
                            2.資料庫的設計更好理解，因為過去的 user 其實有兩種類型，一種是使用者本人，
                              一種是使用者在追蹤的對象，現在改成都是 追蹤對象
                如何實作：先登入 firebaseAuth，再根據 email 取得 firestore 資料
                         （取得 firestore 資料之後需要驗證 uid、email 與 IMEI）done

                後續：User 資料表已經不需要欄位：USED_FOR，可以移除

            2.當有多個追蹤對象時，應該選擇在 MapsActivity 顯示哪一個追蹤對象。
                如何實作：在 MapsActivity 加新的 Menu item，點擊後顯示 DialogFragment，
                顯示追蹤對象(單選)，再將選則結果儲存到 Preference;
                而 MapsActivity 開啟時需要讀取 Preference ，得知應該顯示哪一個追蹤對象的位置 done

            3.新增追蹤目標時，Dialog 中需要輸入對象的 Email 與密碼，而這個Dialog 能使用 DialogFragment 製作，
                不用綁在任一個 Activity，較為靈活。 MapsActivity 即有此需求，因為目前是轉跳到 AccountActivity
                比較 low ~

        todo Facebook 官方通知， 登入FB圖案不符合樣式，必須改正，方法有兩個：
        1. 自行模仿 fb 按鈕樣式，較省工，但也可能被退件
        2. 使用 Facebook api 提供的 com.facebook.login.widget.LoginButton 內建標準按鈕，
           但需使用 Facebook api，因為現有登入方法是 Firebase Authentication

        當然是勇敢的選擇 Facebook api！
-->
